DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `film_in_stock`(IN p_film_id INT, IN p_store_id INT, OUT p_film_count INT)
    READS SQL DATA
BEGIN
     SELECT inventory_id
     FROM inventory
     WHERE film_id = p_film_id
     AND store_id = p_store_id
     AND inventory_in_stock(inventory_id);

     SELECT FOUND_ROWS() INTO p_film_count;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `film_not_in_stock`(IN p_film_id INT, IN p_store_id INT, OUT p_film_count INT)
    READS SQL DATA
BEGIN
     SELECT inventory_id
     FROM inventory
     WHERE film_id = p_film_id
     AND store_id = p_store_id
     AND NOT inventory_in_stock(inventory_id);

     SELECT FOUND_ROWS() INTO p_film_count;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_CAPTURED_DATA`(IN P_DEP_ID VARCHAR(100),
								      IN P_REF_FLOW_ID NUMERIC,
                                      IN P_REF_STEP_ID NUMERIC,
                                      OUT P_CAPTURED_VALUE VARCHAR(100))
BEGIN
SELECT A.DATA_VALUE INTO P_CAPTURED_VALUE
FROM QA_DEP_DATA A
WHERE A.DEP_ID = P_DEP_ID
AND A.FLOW_ID = P_REF_FLOW_ID
AND A.STEP_ID = P_REF_STEP_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_DATA`(INOUT P_DATA_ID NUMERIC,
							 OUT P_DATA_NAME VARCHAR(20),
                             OUT P_DATA_VALUE VARCHAR(100),
                             OUT P_DATA_DESC VARCHAR(100))
BEGIN
SELECT D.DATA_ID, D.DATA_NAME, D.DATA_VALUE,D.DATA_DESCRIPTION 
INTO P_DATA_ID, P_DATA_NAME, P_DATA_VALUE,P_DATA_DESC
FROM QA_DATA D
WHERE D.DATA_ID = P_DATA_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_DATA_ID`(IN P_STEP_ID NUMERIC,
								OUT P_DATA_ID NUMERIC)
BEGIN
SELECT S.DATA_ID INTO P_DATA_ID
FROM QA_STEP S WHERE S.STEP_ID = P_STEP_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_FLOW`(IN P_FLOW_ID NUMERIC,
							 OUT P_FLOW_DESC VARCHAR(100))
BEGIN
SELECT F.FLOW_DESC INTO P_FLOW_DESC
FROM QA_FLOW F
WHERE F.FLOW_ID = P_FLOW_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_FLOW_TEST_RESULT`(IN P_FLOW_ID NUMERIC)
BEGIN
SELECT F.*
FROM QA_TEST_RESULT F,QA_FLOW_TEST_MAP M, QA_FLOW FL
WHERE M.TEST_RESULT_ID = F.TEST_RESULT_ID
AND M.FLOW_ID = FL.FLOW_ID
AND F.STATUS = 'A'
AND M.FLOW_ID=P_FLOW_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_FLOWS`(IN P_TEST_CASE_ID NUMERIC)
BEGIN

SELECT F.FLOW_ID, F.FLOW_DESC, M.EXEC_SEQUENCE 
FROM QA_TEST_CASE_FLOW_MAP M , QA_FLOW F
WHERE M.FLOW_ID = F.FLOW_ID
AND M.TEST_CASE_ID = P_TEST_CASE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_OBJECT`(INOUT P_OBJECT_ID NUMERIC,
							   OUT P_OBJECT_NAME VARCHAR(100),
                               OUT P_OBJECT_XPATH VARCHAR(100),
                               OUT P_OBJECT_DESC VARCHAR(100))
BEGIN
SELECT O.OBJ_ID, O.OBJ_NAME, O.OBJ_XPATH, O.OBJ_DESC
INTO P_OBJECT_ID, P_OBJECT_NAME, P_OBJECT_XPATH,P_OBJECT_DESC
FROM QA_OBJECT O 
WHERE O.OBJ_ID = P_OBJECT_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_OBJECT_ID`(INOUT P_STEP_ID NUMERIC,
								  OUT P_OBJECT_ID NUMERIC)
BEGIN
SELECT S.OBJ_ID INTO P_OBJECT_ID
FROM QA_STEP S
WHERE S.STEP_ID = P_STEP_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_STEP`(INOUT P_STEP_ID NUMERIC,
							 OUT P_STEP_NAME VARCHAR(100),
                             OUT P_ACTION VARCHAR(100),
                             OUT P_STEP_DESC VARCHAR(100))
BEGIN

SELECT S.STEP_ID,S.STEP_NAME,S.ACTION,S.STEP_DESC
INTO P_STEP_ID,P_STEP_NAME,P_ACTION,P_STEP_DESC
FROM QA_STEP S
WHERE S.STEP_ID = P_STEP_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_STEPS`(IN P_FLOW_ID NUMERIC)
BEGIN
SELECT * FROM QA_FLOW_STEP_MAP M 
WHERE M.FLOW_ID = P_FLOW_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `GET_TEST_CASE`(INOUT P_TEST_CASE_ID NUMERIC,
								  OUT P_TEST_CASE_NAME VARCHAR(30),
                                  OUT P_TEST_CASE_DESC VARCHAR(100),
                                  OUT P_CREATED_DT DATE,
                                  OUT P_LAST_UPDATED_DT DATE,
                                  OUT P_CREATED_USER_ID VARCHAR(20),
                                  OUT P_LAST_UPDATED_USER_ID VARCHAR(20))
BEGIN
	SELECT test_case_id,
    test_case_name,
    test_case_desc,
    create_date,
    last_updated_dt,
    create_userid,
    last_updated_userid
    into 
    P_TEST_CASE_ID,
    P_TEST_CASE_NAME,
    P_TEST_CASE_DESC,
    P_CREATED_DT,
    P_LAST_UPDATED_DT,
    P_CREATED_USER_ID,
    P_LAST_UPDATED_USER_ID
    FROM QA_TEST_CASE s
    where test_case_id= P_TEST_CASE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `INSERT_CAPTURED_DATA`(IN P_CAPTURED_VALUE VARCHAR(100),
										 IN P_REF_FLOW_ID NUMERIC,
                                         IN P_REF_STEP_ID NUMERIC,
                                         IN P_REF_KEY VARCHAR(100),
                                         IN P_DEP_ID VARCHAR(100))
BEGIN
INSERT INTO QA_DEP_DATA
(DEP_ID,DATA_KEY,DATA_VALUE,FLOW_ID,CREATED_DT)
VALUES
(P_DEP_ID, P_REF_KEY,P_CAPTURED_VALUE,P_REF_FLOW_ID,SYSDATE,P_REF_STEP_ID);
COMMIT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `INSERT_FAILURE`(IN P_THREAD_ID VARCHAR(100),
								   IN P_LOG LONGTEXT,
                                   IN P_SCREENSHOT BLOB)
BEGIN
INSERT INTO QA_FAILURE
(THREAD_ID,ERROR_LOG,SCREENSHOT,CREATED_DT)
VALUES
(P_THREAD_ID,P_LOG,P_SCREENSHOT);
COMMIT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`barath`@`%` PROCEDURE `INSERT_STEP_RESULT`(IN P_THREAD_ID VARCHAR(100),
									   IN P_TEST_CASE_ID NUMERIC,
                                       IN P_FLOW_ID NUMERIC,
                                       IN P_STEP_ID NUMERIC,
                                       IN P_STATUS VARCHAR(10))
BEGIN
INSERT INTO QA_RESULT_TEST_CASE
(THREAD_ID,TEST_CASE_ID,FLOW_ID,STEP_ID,STATUS)
VALUES
(P_THREAD_ID, P_TEST_CASE_ID,P_FLOW_ID,P_STEP_ID,P_STATUS);
COMMIT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rewards_report`(
    IN min_monthly_purchases TINYINT UNSIGNED
    , IN min_dollar_amount_purchased DECIMAL(10,2) UNSIGNED
    , OUT count_rewardees INT
)
    READS SQL DATA
    COMMENT 'Provides a customizable report on best customers'
proc: BEGIN

    DECLARE last_month_start DATE;
    DECLARE last_month_end DATE;

    /* Some sanity checks... */
    IF min_monthly_purchases = 0 THEN
        SELECT 'Minimum monthly purchases parameter must be > 0';
        LEAVE proc;
    END IF;
    IF min_dollar_amount_purchased = 0.00 THEN
        SELECT 'Minimum monthly dollar amount purchased parameter must be > $0.00';
        LEAVE proc;
    END IF;

    /* Determine start and end time periods */
    SET last_month_start = DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH);
    SET last_month_start = STR_TO_DATE(CONCAT(YEAR(last_month_start),'-',MONTH(last_month_start),'-01'),'%Y-%m-%d');
    SET last_month_end = LAST_DAY(last_month_start);

    /*
        Create a temporary storage area for
        Customer IDs.
    */
    CREATE TEMPORARY TABLE tmpCustomer (customer_id SMALLINT UNSIGNED NOT NULL PRIMARY KEY);

    /*
        Find all customers meeting the
        monthly purchase requirements
    */
    INSERT INTO tmpCustomer (customer_id)
    SELECT p.customer_id
    FROM payment AS p
    WHERE DATE(p.payment_date) BETWEEN last_month_start AND last_month_end
    GROUP BY customer_id
    HAVING SUM(p.amount) > min_dollar_amount_purchased
    AND COUNT(customer_id) > min_monthly_purchases;

    /* Populate OUT parameter with count of found customers */
    SELECT COUNT(*) FROM tmpCustomer INTO count_rewardees;

    /*
        Output ALL customer information of matching rewardees.
        Customize output as needed.
    */
    SELECT c.*
    FROM tmpCustomer AS t
    INNER JOIN customer AS c ON t.customer_id = c.customer_id;

    /* Clean up */
    DROP TABLE tmpCustomer;
END$$
DELIMITER ;
